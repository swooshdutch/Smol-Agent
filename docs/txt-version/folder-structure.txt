[<-- README.md](README.md)
---
# Project Smol Agent - Folder & File Structure

This document provides a comprehensive overview of the project's directory structure. Understanding the purpose of each folder and file is crucial for running, configuring, and extending the application.

## Directory Tree

The project is organized into several key folders and root-level files. Here is a visual representation of the expected layout:

/ (root)
├── docs/
│   ├── txt-version/
│   │   ├── getting-started.txt
│   │   ├── README.txt
│   │   ├── technical-doc.txt
│   │   └── user-manual.txt
│   ├── CONTRIBUTING.md
│   ├── README.md
│   ├── TECHNICAL_DOC.md
│   └── USER_MANUAL.md
├── memory/
│   ├── ltm.json
│   ├── mtm.json
│   └── stm.json
├── prompts/
│   ├── input_injector.txt
│   ├── ltm_summarizer.txt
│   ├── mtm_summarizer.txt
│   ├── smol-agent-sys-prompt.txt
│   └── stm_summarizer.txt
├── terminal/
│   └── (Content is dynamic, managed by the agent)
├── __pycache__/
│   └── (Auto-generated by Python)
├── chat_manager.py
├── config.json
├── gui.py
├── llm_handler.py
└── main.py


---

## Top-Level Folders

### `/docs`
This folder contains all user-facing documentation for the project.
*   **`.md` files:** These are Markdown files intended for easy viewing on platforms like GitHub. They include the main `README.md`, `USER_MANUAL.md`, `TECHNICAL_DOC.md`, and `CONTRIBUTING.md`.
*   **/txt-version/**: This subfolder contains plain text versions of the core documentation for accessibility or offline viewing.

### `/memory`
This is where the agent's persistent mind is stored. The application reads and writes to these files to maintain the agent's state between sessions.
*   `stm.json`: Stores the agent's **Short-Term Memories**.
*   `mtm.json`: Stores the agent's **Medium-Term Memories**.
*   `ltm.json`: Stores the agent's **Long-Term Memories**.

### `/prompts`
This folder holds the core "source code" of the agent's personality and instructions. These are plain text files that you can edit to customize the agent's behavior.
*   `smol-agent-sys-prompt.txt`: The **Main Prompt**. This is the most important file for defining the agent's core identity, rules, and personality.
*   `stm_summarizer.txt`: The prompt used to summarize a turn's events into a new short-term memory.
*   `mtm_summarizer.txt`: The prompt used to consolidate a batch of short-term memories into a new medium-term memory.
*   `ltm_summarizer.txt`: The prompt used to distill a batch of medium-term memories into a new, foundational long-term memory.
*   `input_injector.txt`: The contents of this file are injected into the agent's context on *every single turn*, making it ideal for global, unchanging rules.

### `/terminal`
This is the agent's sandboxed working directory. It's the only place on your file system that the agent can directly interact with. The agent can be instructed to create, read, write, and delete files here. The contents of this folder are dynamic and are entirely managed by the agent's actions.

### `/__pycache__`
This is a standard Python folder that is automatically generated to store compiled bytecode (`.pyc` files). You can safely ignore it.

---

## Root-Level Files

These are the core scripts and configuration files that run the application.

*   `main.py`: The main entry point for the application. You run this file (`python main.py`) to start the agent. It is responsible for initializing all components and starting the main threads.

*   `gui.py`: Contains all the code for the Tkinter-based graphical user interface. It handles rendering windows, panes, and controls, and sends user actions to the `ChatManager`.

*   `chat_manager.py`: The "brain" of the application. This script runs in a separate thread and manages all backend logic, including agent state, memory consolidation, file I/O, and communication with the LLM API.

*   `llm_handler.py`: A dedicated module that handles all direct interaction with the Google Gemini API. It abstracts the API calls, making the rest of the application LLM-agnostic.

*   `config.json`: A critical configuration file. It stores all your settings from the GUI (window sizes, LLM parameters, etc.) as well as the agent's session state, such as chat history and its last-used `self-prompt`. This allows the agent to resume its state when you restart the application.